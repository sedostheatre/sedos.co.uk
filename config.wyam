#n Wyam.Markdown
#n Wyam.Yaml
#n Wyam.Html
#n Wyam.Razor
#n Wyam.Metadata
#n Wyam.Sass
#n Wyam.Images -p

Settings["title"] = "Sedos";
ContentStreamFactory = new MemoryContentStreamFactory();

Pipelines.Add("Footer",
    ReadFiles("footer.yml"),
    Yaml()
);

Pipelines.Add("TopLevelNav",
    ReadFiles("top-level-nav.yml"),
    Yaml()
);

Pipelines.Add("FallbackHeaders",
    ReadFiles("assets/images/headers/fallback/*.*"),
    Image().Resize(width: 1280, height: null),
    OrderBy(@doc["Title"]),
    WriteFiles()
);

Pipelines.Add("Venues",
    ReadFiles("venues/*.md"),
    FrontMatter(Yaml()),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Razor().WithViewStart("Layout/_PageViewStart.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("AllShows",
    ReadFiles("shows/*.md"),
    FrontMatter(Yaml()),
    Meta("has-body-content",  (doc, ctx) => !string.IsNullOrWhiteSpace(doc.Content)),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Meta("header-image", CopyAndResizeHeaderImage),
    Meta("flyer", (doc, ctx) => CopyAndResizeImageFromMeta(doc, ctx, "flyer", null, 360)),
    Meta("sections", (doc, ctx) => doc.Get("sections", Enumerable.Empty<IDocument>()).OrderBy(d => d.Get("order", 1)).Select(d => ProcessMarkdown(d, ctx))),
    Razor().WithViewStart("Layout/_ShowViewStart.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("FutureShows",
    ReadFiles("shows/*.md"),
    FrontMatter(Yaml()),
    Meta("header-image", CopyAndResizeHeaderImage),
    Meta("flyer", (doc, ctx) => CopyAndResizeImageFromMeta(doc, ctx, "flyer", null, 360)),
    Meta("showtimes", (doc, ctx) => doc.Get("showtimes", Enumerable.Empty<IDocument>())),
    Where((doc, ctx) => doc.Get<IEnumerable<IDocument>>("showtimes").Any(time => time.Get<DateTime>("time") > DateTime.Now)),
    OrderBy((doc, ctx) => doc.Get<IEnumerable<IDocument>>("showtimes").Select(time => time.Get<DateTime>("time")).First())
);

Pipelines.Add("News",
    ReadFiles("news/*.md"),
    WriteFiles(".html").OnlyMetadata(),
    FrontMatter(Yaml()),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Excerpt().WithOuterHtml(false),
    Meta("image", (doc, ctx) => CopyAndResizeImageFromMeta(doc, ctx, "image", 300, 300)),
    Meta("header-image", CopyAndResizeHeaderImage),
    Meta("fallback-header",
        (doc, ctx) => CopyAndResizeImageFromFile(doc, ctx, "assets/images/headers/SedosWebsite-Banner-Seats-flaton.jpg", 1280, null)
    ),
    Meta("page-title", "News"),
    Meta("background-override", "bg-turquoise"),
    Razor().WithViewStart("Layout/_NewsArticleViewStart.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("Events",
    ReadFiles("events/*.md"),
    FrontMatter(Yaml()),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Excerpt().WithOuterHtml(false),
    Meta("header-image", CopyAndResizeHeaderImage),
    Meta("image", (doc, ctx) => CopyAndResizeImageFromMeta(doc, ctx, "image", 300, 300)),
    Meta("fallback-header",
        (doc, ctx) => CopyAndResizeImageFromFile(doc, ctx, "assets/images/headers/molm.jpg", 1280, null)
    ),
    Meta("page-title", "Events"),
    Meta("background-override", "bg-purple"),
    Razor().WithViewStart("Layout/_EventViewStart.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("UpcomingEvents",
    Documents("Events"),
    Where((doc, ctx) => doc.Get("times", Enumerable.Empty<IDocument>()).Any(time => time.Get<DateTime>("time") > DateTime.Now)),
    OrderBy((doc, ctx) => doc.Get("times", Enumerable.Empty<IDocument>()).Select(time => time.Get<DateTime>("time")).First())
);

Pipelines.Add("RegularEvents",
    ReadFiles("regular-events/*.md"),
    FrontMatter(Yaml()),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Meta("image", (doc, ctx) => CopyAndResizeImageFromMeta(doc, ctx, "image", 300, 300)),
    Meta("header-image", CopyAndResizeHeaderImage),
    Meta("page-title", "Regular Events"),
    Meta("background-override", "bg-purple"),
    Razor().WithViewStart("Layout/_EventViewStart.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("AboutSections",
    ReadFiles("about/*.md"),
    FrontMatter(Yaml()),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Meta("page-title", "About"),
    ForEach(
        Meta("image", (doc, ctx) => CopyAndResizeImageFromMeta(doc, ctx, "image", 600, 300))
    ),
    Razor().WithViewStart("Layout/_PageViewStart.cshtml"),
    WriteFiles(".html")
);

Pipelines.Add("Sass",
    ReadFiles("assets/css/main.scss"),
    Sass().WithCompactOutputStyle(),
    WriteFiles()
);

Pipelines.Add("Index",
    ReadFiles("index.cshtml"),
    FrontMatter(Yaml()),
    Razor(),
    WriteFiles(".html")
);

Pipelines.Add("TopLevelPages",
    ReadFiles("past-productions.cshtml", "about.cshtml"),
    FrontMatter(Yaml()),
    Meta("header-image", CopyAndResizeHeaderImage),
    Razor(),
    WriteFiles(".html")
);

Pipelines.Add("Markdown",
    ReadFiles("*.md", "groups/*.md"),
    FrontMatter(Yaml()),
    Meta("header-image", CopyAndResizeHeaderImage),
    Markdown()
        .UseExtension<Markdig.Extensions.Bootstrap.BootstrapExtension>()
        .UseExtensions(),
    Razor().WithViewStart((doc, ctx) => doc.Get("view-start", "Layout/_PageViewStart.cshtml")),
    WriteFiles(".html")
);

Pipelines.Add("ImageAssets",
    CopyFiles("assets/images/**/*.*")
);

Pipelines.Add("NetlifyAdmin",
    CopyFiles("admin/**/*.*")
);

public static string TrimIfStartsWith(
    this string value,
    string  prefix)
{
    if(string.IsNullOrEmpty(value))
    {
        return value;
    }
    return value.StartsWith(prefix) ?
            value.Substring(prefix.Length, value.Length - prefix.Length) :
            value;
}

public IDocument CopyAndResizeHeaderImage(IDocument doc, IExecutionContext ctx)
{
    return CopyAndResizeImageFromMeta(doc, ctx, "header-image", 1280, null);
}

public IDocument CopyAndResizeImageFromMeta(IDocument doc, IExecutionContext ctx, string fieldName, int? width, int? height)
{
    var fileName = doc.Get<string>(fieldName).TrimIfStartsWith("/");
    return string.IsNullOrWhiteSpace(fileName) ? null : CopyAndResizeImageFromFile(doc, ctx, fileName, width, height);
}

public IDocument CopyAndResizeImageFromFile(IDocument doc, IExecutionContext ctx, string filename, int? width, int? height)
{
    return ctx.Execute(
        new IModule[]
        {
            ReadFiles(filename),
            Image().Resize(width: width, height: height),
            WriteFiles()
        },
        new IDocument[] { doc }
    ).FirstOrDefault();
}

public IDocument ProcessMarkdown(IDocument doc, IExecutionContext ctx)
{
    return ctx.Execute(
        new IModule[] {Markdown("body")},
        new IDocument[] { doc }
        ).FirstOrDefault();
}
